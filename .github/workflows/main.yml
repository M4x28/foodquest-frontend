name: Deploy React App to Multiple Servers

on:
  push:
    branches:
      - main
workflow_dispatch: # Aggiunto per eseguire manualmente il workflow
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Node.js and dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          unset CI
          npm install

      # Step 3: Build the React app
      - name: Build React App
        run: |
          unset CI
          npm run build

      # Step 4: Deploy to multiple servers
      - name: Deploy to Multiple Servers
        env:
          SERVERS: ${{ secrets.SERVERS }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Parse the servers configuration from the SERVERS variable
          # IFS (Internal Field Separator) is set to ',' to split the SERVERS string into an array of server configurations
          IFS=',' read -r -a servers <<< "$SERVERS"

          for server_config in "${servers[@]}"; do
            # Split server configuration into server address and private key
            # IFS is set to ':' to split each server_config into two parts: server_address and server_key
            IFS=':' read -r server_address server_key <<< "$server_config"

            echo "Deploying to $server_address..."

            # Write the SSH private key to a temporary file
            echo "$server_key" > temp_key
            chmod 600 temp_key  # Ensure the private key file has the correct permissions to prevent unauthorized access

            # Pull the latest code on the server or clone it if not present
            # -o StrictHostKeyChecking=no avoids prompting for confirmation when connecting to a new host
            ssh -i temp_key -o StrictHostKeyChecking=no "$server_address" "cd $DEPLOY_PATH && git pull || git clone https://github.com/M4x28/foodquest-frontend.git $DEPLOY_PATH"

            # Install dependencies and build the app on the server
            ssh -i temp_key -o StrictHostKeyChecking=no "$server_address" "cd $DEPLOY_PATH && npm install && npm run build"

            # Start the application
            ssh -i temp_key -o StrictHostKeyChecking=no "$server_address" "cd $DEPLOY_PATH && npm start"

            # Clean up temporary key
            rm temp_key
          done
